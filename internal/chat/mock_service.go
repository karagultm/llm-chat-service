// Code generated by MockGen. DO NOT EDIT.
// Source: internal/chat/service.go
//
// Generated by this command:
//
//	mockgen -source=internal/chat/service.go -destination=internal/chat/mock_service.go -package=chat
//

// Package chat is a generated GoMock package.
package chat

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// FindHistory mocks base method.
func (m *MockService) FindHistory(sessionID string) ([]ChatMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindHistory", sessionID)
	ret0, _ := ret[0].([]ChatMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindHistory indicates an expected call of FindHistory.
func (mr *MockServiceMockRecorder) FindHistory(sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindHistory", reflect.TypeOf((*MockService)(nil).FindHistory), sessionID)
}

// SendMessage mocks base method.
func (m *MockService) SendMessage(sessionID, message string) (Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", sessionID, message)
	ret0, _ := ret[0].(Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockServiceMockRecorder) SendMessage(sessionID, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockService)(nil).SendMessage), sessionID, message)
}
