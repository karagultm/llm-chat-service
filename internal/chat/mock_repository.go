// Code generated by MockGen. DO NOT EDIT.
// Source: internal/chat/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/chat/repository.go -destination=internal/chat/mock_repository.go -package=chat
//

// Package chat is a generated GoMock package.
package chat

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockRepository) Find(sessionID string) ([]ChatMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", sessionID)
	ret0, _ := ret[0].([]ChatMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockRepositoryMockRecorder) Find(sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockRepository)(nil).Find), sessionID)
}

// Save mocks base method.
func (m *MockRepository) Save(message *ChatMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRepositoryMockRecorder) Save(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepository)(nil).Save), message)
}
